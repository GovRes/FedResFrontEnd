stuff about getting data:
const client = generateClient<Schema>({
  authMode: 'userPool',
}); #this auth mode thing is important

const [resumes, setResumes] = useState<Schema["Resume"]["type"][]>([]);

  const fetchResumes = async () => {
    const { data: items, errors } = await client.models.Resume.list();
    setResumes(items);
  };

  useEffect(() => {
    fetchResumes();
  }, []);
  
// create a utility for sending and receiving messages - move code out of app.tsx and make a way to included prompts

//tk add https://github.com/instructor-ai/instructor-js

//tk optimize contexts & ask AI about splitting out components (did this with keyword sorter)
tk add ability to select past jobs and awards

tk load from application, including completed steps - load those items.

tk add loading on delete application
tk remove deleted application from front-end array